generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionAction {
  TRANSFER
  SWAP
  UNKNOWN
}

model Transaction {
  hash    String @id
  from    String
  to      String
  value   String
  data    String
  chainId String

  action    TransactionAction
  timestamp DateTime          @default(now())

  pointEvents PointEvent[]
  badgeEvents BadgeEvent[]

  @@unique([hash, from])
}

model PointEvent {
  id      Int            @id @default(autoincrement())
  user    String
  chainId String
  type    PointEventType
  data    String // Any extra data, like specs on the milestone or so on
  minted  Boolean        @default(false)
  value   Int

  // transaction where the point or milestone has been achieved
  transaction     Transaction @relation(fields: [transactionHash], references: [hash])
  transactionHash String

  @@unique([transactionHash, type, data])
}

enum PointEventType {
  TransactionsSent
  TransactionsSentMilestone
  TokenSwap
  UniqueChainUse
  DaysActive
}

model BadgeEvent {
  id      Int            @id @default(autoincrement())
  user    String
  chainId String
  type    BadgeEventType
  data    String // Any extra data associated to the type, number of days active, etc
  minted  Boolean        @default(false)

  // transaction where the point or milestone has been achieved
  transaction     Transaction @relation(fields: [transactionHash], references: [hash])
  transactionHash String

  @@unique([type, data, user, chainId])
}

enum BadgeEventType {
  TransactionsSent
  DaysActive
  DefiInteractions
}

model User {
  wallet     String      @id
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userTokens UserToken[]
}

model UserToken {
  id         Int     @id @default(autoincrement())
  chainId    Int
  user       User    @relation(fields: [userWallet], references: [wallet])
  userWallet String
  address    String
  name       String
  symbol     String
  decimals   Int
  logoURI    String?

  @@unique([userWallet, address])
}
