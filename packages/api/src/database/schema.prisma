generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  // postgres for prod
  // provider = "postgresql"
  // url      = env("DATABASE_URL")

  // sqlite for local testing
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum TransactionAction {
  TRANSFER
  SWAP
  UNKNOWN
}

model Transaction {
  hash  String @id
  from  String
  to    String
  value String
  data  String

  action    TransactionAction
  timestamp DateTime          @default(now())

  pointEvents PointEvent[]
  badgeEvents BadgeEvent[]

  @@unique([hash, from])
}

model PointEvent {
  id     Int            @id @default(autoincrement())
  type   PointEventType
  data   String // Any extra data, like specs on the milestone or so on
  minted Boolean        @default(false)
  value  Int

  transaction     Transaction @relation(fields: [transactionHash], references: [hash])
  transactionHash String

  @@unique([transactionHash, type, data])
}

enum PointEventType {
  TransactionsSent
  TransactionsSentMilestone
  TokenSwap
  UniqueChainUse
  DaysActive
}

model BadgeEvent {
  id     Int            @id @default(autoincrement())
  type   BadgeEventType
  data   String // Any extra data associated to the type, number of days active, etc
  minted Boolean        @default(false)

  transactions Transaction[]

  @@unique([type, data])
}

enum BadgeEventType {
  DaysActive
  TransactionsSent
  DefiInteractions
}
