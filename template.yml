AWSTemplateFormatVersion: "2010-09-09"
Resources:
  EventsTimeframeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Events-Timeframe-Staging
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: TTL
          AttributeType: N
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification: # Configuración válida para Streams
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification: # Configuración de TTL
        AttributeName: TTL
        Enabled: true

  # Lambda Function
  TTLExpirationHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TTLExpirationHandler
      Handler: index.handler
      Runtime: nodejs20.x
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          exports.handler = async (event) => {
            console.log("DynamoDB Stream Event:", JSON.stringify(event, null, 2));
            for (const record of event.Records) {
              if (record.eventName === "REMOVE") {
                console.log("Processing expired item:", record.dynamodb.Keys);
              }
            }
            return { statusCode: 200 };
          };
      Role: !GetAtt TTLExpirationHandlerRole.Arn

  # IAM Role for Lambda
  TTLExpirationHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: "*"
              - Effect: Allow
                Action: "logs:*"
                Resource: "*"

  # DynamoDB Stream
  EventsTimeframeStream:
    Type: AWS::DynamoDB::StreamSpecification
    Properties:
      StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Ref EventsTimeframeStagingTable

  # Event Source Mapping for Lambda
  TTLExpirationEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt EventsTimeframeStagingTable.StreamArn
      FunctionName: !Ref TTLExpirationHandlerFunction
      StartingPosition: LATEST
